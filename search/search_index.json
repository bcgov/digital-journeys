{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PSA - Digital Journeys Welcome to the dev documentation for the Digital Journeys solution, a form Builder and Workflow manager built on top of formsflow.ai . About The Project This repo contains a BC Gov branded version of formsflow.ai that will support public facing and internal Digital Journeys used by PSA and their employees. Contributing? Checkout our github repo to get started with some development! Get Started","title":"Home"},{"location":"#about-the-project","text":"This repo contains a BC Gov branded version of formsflow.ai that will support public facing and internal Digital Journeys used by PSA and their employees.","title":"About The Project"},{"location":"#contributing","text":"Checkout our github repo to get started with some development! Get Started","title":"Contributing?"},{"location":"forms/","text":"Forms Table of Contents Calculated Form Values Examples Auto-populate form fields Uploading a form Calculated Form Values If you would like a certain form field to have a calculated value based on the input from previous fields it could potentially require the use of some custom javascript code. These calculations can be made by selected the field you wish to contain the calculated value and clicking on it's gear icon. - Navigate to the Data tab at the top - Scroll down to the Calculated Value section and click to expand - This will show some general instructions on how to add calculations Examples Telework Calculated \"Number of days teleworking in a week\" Calculate a value based on the number of boxes checked representing days of the week: The following code snippet checks each checkbox contained within the theEmployeesScheduleWillBe field of the form and adds it to the value of this field if it has been checked. value = Object.keys(data.theEmployeesTeleworkScheduleWillBe).reduce((acc, key) => { if (data.theEmployeesTeleworkScheduleWillBe[key] === true) { acc++ } return acc; },0) How to auto-populate form fields with the user data If you would like to automatically populate a form's field with the user's data, you can do so by adding one of the pre-defined names to a field in your form. Follow these steps to add the user's data to a field: Step 1: Look at the pre-defined values along with their names in table below or from /forms-flow-api/src/formsflow_api/models/employee_data.py file. These values are available to all forms. Step 2: When creating forms, in the Form builder dialog for a component, under API tab, you can set the Property Name of a field. If you want this field to be pre-populated with the user data simply add one of the pre-defined names (found in the last step) as a Property Name . Step 3: If you want to use one piece of user data more than once in a form, you can append _ to the property name of your field. For example, if you want to use the user's name second time in a form, you can set the Property Name of the field to be name_2 . Property Name Description name first and last name of employee as retuned from ODS firstName first name of employee lastName last name of employee displayName A calculated value based on firstName + lastName of employee email email of employee address1 home address1 of employee address2 home address2 of employee officePhone office phone of employee empId employee id of employee positionTitle position title of employee depId department id of employee officeAddress1 office address1 of employee officeAddress2 office address2 of employee officeCity office city of employee officeCountry office country of employee officePostal office postal code of employee officeStateprovince office state or province of employee organization organization of employee divisionLevel2 level 2 branch/division of employee supervisorName name of employee's supervisor supervisorEmail email of employee's supervisor supervisorPositionTitle position title of employee's supervisor Uploading a form Migrating a form to a new environment For this work, you need a designer role in the two environments. In the first environment you are migrating the form from, download the form by finding the form in the list of forms and clicking Download Form . The form will be saved in JSON format on your computer. Go to the target environment: Upload the downloaded form on the Forms page through the Upload Form button. If there is no previous version of that form in the target environment, the new form will appear in the list of forms. If there is a previous version of that form in the target environment, the new form overwrites the older one. Please note that you don't see any warnings that you're overwriting. Add the necessary workflow and then publish the form if that is the desired behaviour. Creating a duplicate form For this work you need a designer role. Download the form you want to duplicate and save it to your computer. The form will be saved in JSON format on your computer. Open the JSON file (in a text editor or an online text editor compatible with JSON format) and change the following fields. For example, if the form you're duplicating is called Telework then change the following fields and save the file: title : change it to something else like Telework-test-1 . name : change it to something else like Telework-test-1 . path : change it to something else like Telework-test-1 . Upload the file to the Forms page through the Upload Form button. You the will see the new form along with the old form in the list of forms. Add the necessary workflow and then publish the form if that is the desired behaviour. You can assign the same workflow to the duplicated form or assign a different workflow.","title":"Forms"},{"location":"forms/#forms","text":"","title":"Forms"},{"location":"forms/#table-of-contents","text":"Calculated Form Values Examples Auto-populate form fields Uploading a form","title":"Table of Contents"},{"location":"forms/#calculated-form-values","text":"If you would like a certain form field to have a calculated value based on the input from previous fields it could potentially require the use of some custom javascript code. These calculations can be made by selected the field you wish to contain the calculated value and clicking on it's gear icon. - Navigate to the Data tab at the top - Scroll down to the Calculated Value section and click to expand - This will show some general instructions on how to add calculations","title":"Calculated Form Values"},{"location":"forms/#examples","text":"","title":"Examples"},{"location":"forms/#telework-calculated-number-of-days-teleworking-in-a-week","text":"","title":"Telework Calculated \"Number of days teleworking in a week\""},{"location":"forms/#calculate-a-value-based-on-the-number-of-boxes-checked-representing-days-of-the-week","text":"The following code snippet checks each checkbox contained within the theEmployeesScheduleWillBe field of the form and adds it to the value of this field if it has been checked. value = Object.keys(data.theEmployeesTeleworkScheduleWillBe).reduce((acc, key) => { if (data.theEmployeesTeleworkScheduleWillBe[key] === true) { acc++ } return acc; },0)","title":"Calculate a value based on the number of boxes checked representing days of the week:"},{"location":"forms/#how-to-auto-populate-form-fields-with-the-user-data","text":"If you would like to automatically populate a form's field with the user's data, you can do so by adding one of the pre-defined names to a field in your form. Follow these steps to add the user's data to a field: Step 1: Look at the pre-defined values along with their names in table below or from /forms-flow-api/src/formsflow_api/models/employee_data.py file. These values are available to all forms. Step 2: When creating forms, in the Form builder dialog for a component, under API tab, you can set the Property Name of a field. If you want this field to be pre-populated with the user data simply add one of the pre-defined names (found in the last step) as a Property Name . Step 3: If you want to use one piece of user data more than once in a form, you can append _ to the property name of your field. For example, if you want to use the user's name second time in a form, you can set the Property Name of the field to be name_2 . Property Name Description name first and last name of employee as retuned from ODS firstName first name of employee lastName last name of employee displayName A calculated value based on firstName + lastName of employee email email of employee address1 home address1 of employee address2 home address2 of employee officePhone office phone of employee empId employee id of employee positionTitle position title of employee depId department id of employee officeAddress1 office address1 of employee officeAddress2 office address2 of employee officeCity office city of employee officeCountry office country of employee officePostal office postal code of employee officeStateprovince office state or province of employee organization organization of employee divisionLevel2 level 2 branch/division of employee supervisorName name of employee's supervisor supervisorEmail email of employee's supervisor supervisorPositionTitle position title of employee's supervisor","title":"How to auto-populate form fields with the user data"},{"location":"forms/#uploading-a-form","text":"","title":"Uploading a form"},{"location":"forms/#migrating-a-form-to-a-new-environment","text":"For this work, you need a designer role in the two environments. In the first environment you are migrating the form from, download the form by finding the form in the list of forms and clicking Download Form . The form will be saved in JSON format on your computer. Go to the target environment: Upload the downloaded form on the Forms page through the Upload Form button. If there is no previous version of that form in the target environment, the new form will appear in the list of forms. If there is a previous version of that form in the target environment, the new form overwrites the older one. Please note that you don't see any warnings that you're overwriting. Add the necessary workflow and then publish the form if that is the desired behaviour.","title":"Migrating a form to a new environment"},{"location":"forms/#creating-a-duplicate-form","text":"For this work you need a designer role. Download the form you want to duplicate and save it to your computer. The form will be saved in JSON format on your computer. Open the JSON file (in a text editor or an online text editor compatible with JSON format) and change the following fields. For example, if the form you're duplicating is called Telework then change the following fields and save the file: title : change it to something else like Telework-test-1 . name : change it to something else like Telework-test-1 . path : change it to something else like Telework-test-1 . Upload the file to the Forms page through the Upload Form button. You the will see the new form along with the old form in the list of forms. Add the necessary workflow and then publish the form if that is the desired behaviour. You can assign the same workflow to the duplicated form or assign a different workflow.","title":"Creating a duplicate form"},{"location":"upgrading/","text":"Upgrading forms-flow-ai version This document contains useful information and a basic guide for upgrading the locally saved forms-flow-ai files with the ones from the source repo. Adding a remote upstream The repository should already have the forms-flow-ai repository set as a remote upstream, allowing new branches to be pulled from it's origin. However, in the event that the remote repository is ever disconnected for any reason, and needs to be re-added you can use the command: git remote add formsflow {url_to_repo} . From there, the usual fetch commands can be used to get new branches: git fetch formsflow Creating a merge branch Create a new branch off the main (with all the latest changes) in your local DGJ repo and from there, you can issue the merge command by git merge {forms_flow_ai_target_branch/tag} -s -recursive --allow-unrelated-histories Please note that new versions of form-flow-ai can usually be found under Tags . For example to merge the v5 of form-flow-ai with a new local branch while on the main branch with latest changes, run: # This will create a new branch off main $ git checkout -b update-to-v5-branch # This will merge v5 (tag) with the newly created update-to-v5-branch $ git merge v5.0.0 -s recursive --allow-unrelated-histories This will begin a merge operation bringing in changes from the forms-flow-ai target branch/tag into the current branch. Git may prompt you that certain files or folders are preventing the merge from occuring. Two culprits previously were: forms-flow-bpm/src/main/resources/mail-config.properties and forms-flow-forms/mongo_entrypoint/* . The recommended approach is to manually apply these files on-top of a completed merge, by moving them to a temporary directory, deleting them in the repository, and issuing the merge command as normal. These files should be reinstated at the end of the merge. The mongo_entrypoint folder should not contain any changes from the forms-flow repo, and mail-config.properties should always contain the current changes from the DGJ repo. Merging forms-flow-ai and DGJ overridden files There will be numerous conflicts that need to be reconciled during the merge. These files will be any that have had custom work done on them during the history of the DGJ project. The goal is to update the file with the new forms-flow-ai changes first, and apply the custom DGJ implementations overtop. In some instances, the DGJ implementations may need to be updated to work with the new forms-flow-ai changes, however this should be addressed on a case-by-case basis during the regression testing process. For now, the most accurate way to accomplish this is to accept all changes from the forms-flow-ai incoming branch as a base, and add the custom DGJ implementations in on top. VSCode will show this as two side-by-side windows, one for each of the incoming branches, and a 'Result' window at the bottom. Click the '...' menu on the left window pane and select 'accept all changes', then using the checkboxes in the vertical margin between the two windows, manually select which changes from the right side DGJ file to apply overtop. the Result window should update to reflect the selections, and should show the forms-flow-ai file with just the DGJ changes added in. In some circumstances, the diff will not be clean and changes will be shown intersecting new code blocks, or be outside of a bracket pair. In these cases, it is perfectly acceptable to copy the target DGJ code, and paste it directly into the Results window in an acceptable spot. For more complex files with less obvious differences between what was forms-flow-ai changes, and what was DGJ custom code, a manual inspection of both files can be done. for each of the highlighted blocks in both windows, you can view the file on the specific branch or tag in both the forms-flow-ai and DGJ repositories. By using the history functionality in the file source viewer, you can inspect each of the pieces of code and walk back through individual changes or additions and ensure you are only accepting the new updates and the DGJ implementation. This most commonly occurs when code has been removed from the forms-flow-ai repo since the last update due to deprecation or functionality change, or alternatively if a section of code has undergone simultaneous changes from both a forms-flow update and a DGJ change. Once the conflict was resolved in a file, click + on that file in the source control menu in VS Code. This will move that file to Staged Changes . Once all conflicting files have been addressed this way, save all open files, stage the changes, and issue the command git merge --continue . The merge should finalize at this point and leave you with an unconflicted repository. If while you're working on update branch, new commits were added to the main branch, you you need to: 1. Go to main branch and pull the latest changes 2. Checkout the update branch and run merge command git merge main Steps to validate the changes to the local build Upon building the app, it is not uncommon to have a variety of compilation errors. These may need to be manually addressed, but by far the most common has been missing imports from the merge due to consistent changes in these areas of the files. It is also significantly more common to occur in the forms-flow-bpm subfolder than the forms-flow-web subfolder. Once the application is building successfully, additional steps may need to be taken in the event that database changes were included in any of the updates. Mongodb The mongoDB disc might need to be reset. To do this, delete the ./mongodb folder, and re-run the build. Docker exec into the running container, and cd to the ./script folder. Run the resourceId_{your_OS-type}.bat with the command ./resourceId_{your_OS_type}.sh admin@example.com changeme . Update the ./.env file at the project root (not in the running container) with the keys provided by the file output. Postgres TODO: figure out if migrations are even possible. might be worth to reset the posgres DB on local anyways, because if Mongo was reset it will orphan any Tasks left unfinished. Migration will need to be figured out for the prod environment however.","title":"Upgrading"},{"location":"upgrading/#upgrading-forms-flow-ai-version","text":"This document contains useful information and a basic guide for upgrading the locally saved forms-flow-ai files with the ones from the source repo.","title":"Upgrading forms-flow-ai version"},{"location":"upgrading/#adding-a-remote-upstream","text":"The repository should already have the forms-flow-ai repository set as a remote upstream, allowing new branches to be pulled from it's origin. However, in the event that the remote repository is ever disconnected for any reason, and needs to be re-added you can use the command: git remote add formsflow {url_to_repo} . From there, the usual fetch commands can be used to get new branches: git fetch formsflow","title":"Adding a remote upstream"},{"location":"upgrading/#creating-a-merge-branch","text":"Create a new branch off the main (with all the latest changes) in your local DGJ repo and from there, you can issue the merge command by git merge {forms_flow_ai_target_branch/tag} -s -recursive --allow-unrelated-histories Please note that new versions of form-flow-ai can usually be found under Tags . For example to merge the v5 of form-flow-ai with a new local branch while on the main branch with latest changes, run: # This will create a new branch off main $ git checkout -b update-to-v5-branch # This will merge v5 (tag) with the newly created update-to-v5-branch $ git merge v5.0.0 -s recursive --allow-unrelated-histories This will begin a merge operation bringing in changes from the forms-flow-ai target branch/tag into the current branch. Git may prompt you that certain files or folders are preventing the merge from occuring. Two culprits previously were: forms-flow-bpm/src/main/resources/mail-config.properties and forms-flow-forms/mongo_entrypoint/* . The recommended approach is to manually apply these files on-top of a completed merge, by moving them to a temporary directory, deleting them in the repository, and issuing the merge command as normal. These files should be reinstated at the end of the merge. The mongo_entrypoint folder should not contain any changes from the forms-flow repo, and mail-config.properties should always contain the current changes from the DGJ repo.","title":"Creating a merge branch"},{"location":"upgrading/#merging-forms-flow-ai-and-dgj-overridden-files","text":"There will be numerous conflicts that need to be reconciled during the merge. These files will be any that have had custom work done on them during the history of the DGJ project. The goal is to update the file with the new forms-flow-ai changes first, and apply the custom DGJ implementations overtop. In some instances, the DGJ implementations may need to be updated to work with the new forms-flow-ai changes, however this should be addressed on a case-by-case basis during the regression testing process. For now, the most accurate way to accomplish this is to accept all changes from the forms-flow-ai incoming branch as a base, and add the custom DGJ implementations in on top. VSCode will show this as two side-by-side windows, one for each of the incoming branches, and a 'Result' window at the bottom. Click the '...' menu on the left window pane and select 'accept all changes', then using the checkboxes in the vertical margin between the two windows, manually select which changes from the right side DGJ file to apply overtop. the Result window should update to reflect the selections, and should show the forms-flow-ai file with just the DGJ changes added in. In some circumstances, the diff will not be clean and changes will be shown intersecting new code blocks, or be outside of a bracket pair. In these cases, it is perfectly acceptable to copy the target DGJ code, and paste it directly into the Results window in an acceptable spot. For more complex files with less obvious differences between what was forms-flow-ai changes, and what was DGJ custom code, a manual inspection of both files can be done. for each of the highlighted blocks in both windows, you can view the file on the specific branch or tag in both the forms-flow-ai and DGJ repositories. By using the history functionality in the file source viewer, you can inspect each of the pieces of code and walk back through individual changes or additions and ensure you are only accepting the new updates and the DGJ implementation. This most commonly occurs when code has been removed from the forms-flow-ai repo since the last update due to deprecation or functionality change, or alternatively if a section of code has undergone simultaneous changes from both a forms-flow update and a DGJ change. Once the conflict was resolved in a file, click + on that file in the source control menu in VS Code. This will move that file to Staged Changes . Once all conflicting files have been addressed this way, save all open files, stage the changes, and issue the command git merge --continue . The merge should finalize at this point and leave you with an unconflicted repository. If while you're working on update branch, new commits were added to the main branch, you you need to: 1. Go to main branch and pull the latest changes 2. Checkout the update branch and run merge command git merge main","title":"Merging forms-flow-ai and DGJ overridden files"},{"location":"upgrading/#steps-to-validate-the-changes-to-the-local-build","text":"Upon building the app, it is not uncommon to have a variety of compilation errors. These may need to be manually addressed, but by far the most common has been missing imports from the merge due to consistent changes in these areas of the files. It is also significantly more common to occur in the forms-flow-bpm subfolder than the forms-flow-web subfolder. Once the application is building successfully, additional steps may need to be taken in the event that database changes were included in any of the updates.","title":"Steps to validate the changes to the local build"},{"location":"upgrading/#mongodb","text":"The mongoDB disc might need to be reset. To do this, delete the ./mongodb folder, and re-run the build. Docker exec into the running container, and cd to the ./script folder. Run the resourceId_{your_OS-type}.bat with the command ./resourceId_{your_OS_type}.sh admin@example.com changeme . Update the ./.env file at the project root (not in the running container) with the keys provided by the file output.","title":"Mongodb"},{"location":"upgrading/#postgres","text":"TODO: figure out if migrations are even possible. might be worth to reset the posgres DB on local anyways, because if Mongo was reset it will orphan any Tasks left unfinished. Migration will need to be figured out for the prod environment however.","title":"Postgres"},{"location":"workflows/","text":"Camunda This document contains information and HOWTOs on custom Camunda extensions made for use for the PSA Digital Journeys project. This includes things like how to send an email as part of a Camunda workflow, and how to push submissions to the ODS. Deploying Workflow to platform In order to deploy a new workflow to the platform, or update an existing one, you have to use the Camunda REST API. Instructions on how to do this using Postman , can be found in the Formsflow.ai repository . Notes baseUrl and keycloakTokenUrl should be updated to the values in the following table based on the environment you're deploying to. Environment baseUrl keycloakTokenUrl Dev https://digital-journeys-camunda-dev.apps.silver.devops.gov.bc.ca/camunda https://digital-journeys-keycloak-dev.apps.silver.devops.gov.bc.ca/auth/realms/psa-digital-journey-dev/protocol/openid-connect/token Test https://digital-journeys-camunda-test.apps.silver.devops.gov.bc.ca/camunda https://digital-journeys-keycloak-test.apps.silver.devops.gov.bc.ca/auth/realms/psa-digital-journey-test/protocol/openid-connect/token Production TBD TBD A value for the client_secret can be found using the Keycloak admin interface Environment Keycloak Admin Console Dev https://digital-journeys-keycloak-dev.apps.silver.devops.gov.bc.ca/auth/admin/psa-digital-journey-dev/console/ Test https://digital-journeys-keycloak-test.apps.silver.devops.gov.bc.ca/auth/admin/psa-digital-journey-test/console/ Production TBD Navigate to Clients -> forms-flow-bpm You can find the secret in the Credentials tab Sending submission data to the Telus operational Data Store (ODS) In order to support analytics of submission data for digital Journeys, submission data is pushed from the Formsflow application to the ODS. This can be added to a Camunda workflow by using the custom SendSubmissionToODSDelegate . This will send the given form submission (based on the formUrl execution variable), to the given ODS endpoint, with the submittors IDIR and BCGov GUID added as properties. How? Create a new Service Task in your workflow Select Java Class as the \"Implementation\" Set Java Class to org.camunda.bpm.extension.hooks.listeners.SendSubmissionToODSDelegate Add an Input Parameter named endpoint in the Input/Output tab of the service task. Set the Variable Assignment Type to \"String or Expression\" and \"Variable assignment Value\" to the name of the endpoint you want to send the submission to. Example: In case of the telework form, this is Datamart_Telework_app_telework_info . The Details Names of the fields that are sent to the ODS are taken from the \"Property Name\" found on each component in the Form Builder as seen below. All form fields are sent to the ODS as is, with the exception of any file uploads, where the file content itself is replaced with the name of the file uploaded (comma separated in case of multiple files). Execution Variables By default, the platform makes the following variables available to use in a workflow for all Submissions: Property Description applicationId Unique identifier of the application formUrl Full URL to the submission submitterName Identifier of the person submitting the application GUID BCGov GUID of the person that submitted the application (If logged in with IDIR) IDIR IDIR of the person that submitted the application (If logged in with IDIR) submissionDate Timestamp of when the application was submitted If any other properties from the submission will be used by the workflow, The org.camunda.bpm.extension.hooks.listeners.FormBPMDataPipelineListener listener needs to be added at a step before the value is to be used. This Listener, makes all values from the submission available to be used by the workflow, based on the corresponding \"Property Name\" as defined in the Form builder. How? Add a new \"Execution listener\" in the Listeners tab of a Sequence flow. Set \"Event Type\" to take , \"Listener Type\" to Java Class and \"Java Class\" to org.camunda.bpm.extension.hooks.listeners.FormBPMDataPipelineListener You can now use values from the form submission in any logic specified after the sequence flow this listener was added to.","title":"Workflows"},{"location":"workflows/#camunda","text":"This document contains information and HOWTOs on custom Camunda extensions made for use for the PSA Digital Journeys project. This includes things like how to send an email as part of a Camunda workflow, and how to push submissions to the ODS.","title":"Camunda"},{"location":"workflows/#deploying-workflow-to-platform","text":"In order to deploy a new workflow to the platform, or update an existing one, you have to use the Camunda REST API. Instructions on how to do this using Postman , can be found in the Formsflow.ai repository . Notes baseUrl and keycloakTokenUrl should be updated to the values in the following table based on the environment you're deploying to. Environment baseUrl keycloakTokenUrl Dev https://digital-journeys-camunda-dev.apps.silver.devops.gov.bc.ca/camunda https://digital-journeys-keycloak-dev.apps.silver.devops.gov.bc.ca/auth/realms/psa-digital-journey-dev/protocol/openid-connect/token Test https://digital-journeys-camunda-test.apps.silver.devops.gov.bc.ca/camunda https://digital-journeys-keycloak-test.apps.silver.devops.gov.bc.ca/auth/realms/psa-digital-journey-test/protocol/openid-connect/token Production TBD TBD A value for the client_secret can be found using the Keycloak admin interface Environment Keycloak Admin Console Dev https://digital-journeys-keycloak-dev.apps.silver.devops.gov.bc.ca/auth/admin/psa-digital-journey-dev/console/ Test https://digital-journeys-keycloak-test.apps.silver.devops.gov.bc.ca/auth/admin/psa-digital-journey-test/console/ Production TBD Navigate to Clients -> forms-flow-bpm You can find the secret in the Credentials tab","title":"Deploying Workflow to platform"},{"location":"workflows/#sending-submission-data-to-the-telus-operational-data-store-ods","text":"In order to support analytics of submission data for digital Journeys, submission data is pushed from the Formsflow application to the ODS. This can be added to a Camunda workflow by using the custom SendSubmissionToODSDelegate . This will send the given form submission (based on the formUrl execution variable), to the given ODS endpoint, with the submittors IDIR and BCGov GUID added as properties.","title":"Sending submission data to the Telus operational Data Store (ODS)"},{"location":"workflows/#how","text":"Create a new Service Task in your workflow Select Java Class as the \"Implementation\" Set Java Class to org.camunda.bpm.extension.hooks.listeners.SendSubmissionToODSDelegate Add an Input Parameter named endpoint in the Input/Output tab of the service task. Set the Variable Assignment Type to \"String or Expression\" and \"Variable assignment Value\" to the name of the endpoint you want to send the submission to. Example: In case of the telework form, this is Datamart_Telework_app_telework_info . The","title":"How?"},{"location":"workflows/#details","text":"Names of the fields that are sent to the ODS are taken from the \"Property Name\" found on each component in the Form Builder as seen below. All form fields are sent to the ODS as is, with the exception of any file uploads, where the file content itself is replaced with the name of the file uploaded (comma separated in case of multiple files).","title":"Details"},{"location":"workflows/#execution-variables","text":"By default, the platform makes the following variables available to use in a workflow for all Submissions: Property Description applicationId Unique identifier of the application formUrl Full URL to the submission submitterName Identifier of the person submitting the application GUID BCGov GUID of the person that submitted the application (If logged in with IDIR) IDIR IDIR of the person that submitted the application (If logged in with IDIR) submissionDate Timestamp of when the application was submitted If any other properties from the submission will be used by the workflow, The org.camunda.bpm.extension.hooks.listeners.FormBPMDataPipelineListener listener needs to be added at a step before the value is to be used. This Listener, makes all values from the submission available to be used by the workflow, based on the corresponding \"Property Name\" as defined in the Form builder.","title":"Execution Variables"},{"location":"workflows/#how_1","text":"Add a new \"Execution listener\" in the Listeners tab of a Sequence flow. Set \"Event Type\" to take , \"Listener Type\" to Java Class and \"Java Class\" to org.camunda.bpm.extension.hooks.listeners.FormBPMDataPipelineListener You can now use values from the form submission in any logic specified after the sequence flow this listener was added to.","title":"How?"},{"location":"ReleaseNote/","text":"Release Note It will give a context to how a developer and a form designer can manage release notes on the system. It will not limit only to the release note. If management wants to display some important message in the popup, we can use the same feature. How it will work? 1. A form designer needs to create a release note using a form builder and provide that form file to the developer . 2. A developer needs to use the JSON file provided by the form designer and add a new release note in the system using available APIs. Available API endpoints Release note endpoints are available under the web-API URL. - /release-note - It will use to create/update/list release notes in the system. - It supports POST and GET methods. (Note, the PUT method is not implemented. It can add in a future version). - /release-note/unread - It supports the GET method and pulls an unread release note for the logged-in user. It will pull only one release note at a time. - /release-note/read - It supports the POST method and marks read the displayed release note. Operations Add release note Add a new release note. Endpoint : POST /release-note Header : { \"Authorization\": \"Bearer < FORM DESIGNER TOKEN >\" } Body : A json object. - title: Release note title / Message title. - content: < formio form object > - When we export form, it will export in json format and it contains one key forms . It is an array and the first object of this array is a form object that we have to pass here. The form .json file will look like this . { \"forms\": [ {<form details>} ] } . Modify release note No separate API was built to update details in the release note. Because new changes must be visible to all the users again. We will add a new release note with the updated content and mark the old release note as inactive. Endpoint : POST /release-note Header : { \"Authorization\": \"Bearer < FORM DESIGNER TOKEN >\" } Body : A json object. - title: Release note title / Message title . - content: < formio orm object > - release_note_id: < old release note id > - Old release note id can be fould using list release note . List release notes It will list all the active release notes. Endpoint : GET /release-note Header : { \"Authorization\": \"Bearer < FORM DESIGNER TOKEN >\" } Fetch unread release note One unread and active release note can be retrieved based on the user token. It will return 404 (not found) if no unread release note is found for the logged-in user. Endpoint : GET /release-note/unread Header : { \"Authorization\": \"Bearer < USER TOKEN >\" } Mark read release note for user It will mark release note read for the logged-in user. Endpoint : POST /release-note/read Header : { \"Authorization\": \"Bearer < USER TOKEN >\" } Body : A json object. - release_note_id: Release note id that will mark read for the logged-in user. How to add Release note Let's understand the role of the designer and developer here in detail. Please go to the example section to see the sample release note .json and how it will be displayed on the web page. Form Designer The form Designer needs to go to the Create Form page and design HTML content for the release note using the formio builder. Once the Form was designed, Go to the form list tab, select the release note form and click on Download Form . It will download one JSON file. That needs to pass on to the developer . It can be create on any lower environment like DEV or TEST . Notes The form name is not important, So feel free to pick any unique name or title here. No need to keep the created release note once you export the form's JSON and share it with the developer. To edit release notes, One can use the upload form feature on the form tab. Edit the required details and share them with the developer again to update the release note table. In the form builder, there is a provision for the custom class. So if you want to change any style like space between lines, header design, font size, etc. The designer can coordinate it with the developer and find an existing style class for it or the developer can add a new style class for the new style requirement. Developer To add a release note in the system. Developers can perform actions like adding, updating, and list release notes. Let's see how a release note can be added after receiving the .json file from the form designer . - Open postman or any API manager tool. - Follow Add release note operations steps. - In case of modify release note, please follow Modify release note . - Please collect old release note id using List release notes . Emample If you want to start editing the sample form, Please download it from here . (for designer) Upload it in the form tab by clicking on 'upload form'. Now you can edit it with new content. Download it again and share the same with developer. Please find sample add release note json here . (for developer) To checkout content of the above JSON file, please see below release-note popup. Future enhancement Currently, there is no frontend developed that is used to manage release notes. The below list can be reviewed and select required features and implements the same. No needs to add all the features/points. - Add new frontend that will list all the release notes. - Add a page where you can upload release note data and no need to ask any developer. It will work with the DESIGNER role only. - Create/modify component for the release note module separately than the form tab. It will take more time to replicate or use the same components to enable add/edit release note directly on the release-note page and no needs to go to the form tab. - From the list one can in-active any release notes. - Extend - List users who read the release note. - Re-enable a release note for one user by deleting its read entry. - Add a release note for the selected users only.","title":"Release Note"},{"location":"ReleaseNote/#release-note","text":"It will give a context to how a developer and a form designer can manage release notes on the system. It will not limit only to the release note. If management wants to display some important message in the popup, we can use the same feature. How it will work? 1. A form designer needs to create a release note using a form builder and provide that form file to the developer . 2. A developer needs to use the JSON file provided by the form designer and add a new release note in the system using available APIs.","title":"Release Note"},{"location":"ReleaseNote/#available-api-endpoints","text":"Release note endpoints are available under the web-API URL. - /release-note - It will use to create/update/list release notes in the system. - It supports POST and GET methods. (Note, the PUT method is not implemented. It can add in a future version). - /release-note/unread - It supports the GET method and pulls an unread release note for the logged-in user. It will pull only one release note at a time. - /release-note/read - It supports the POST method and marks read the displayed release note.","title":"Available API endpoints"},{"location":"ReleaseNote/#operations","text":"","title":"Operations"},{"location":"ReleaseNote/#add-release-note","text":"Add a new release note. Endpoint : POST /release-note Header : { \"Authorization\": \"Bearer < FORM DESIGNER TOKEN >\" } Body : A json object. - title: Release note title / Message title. - content: < formio form object > - When we export form, it will export in json format and it contains one key forms . It is an array and the first object of this array is a form object that we have to pass here. The form .json file will look like this . { \"forms\": [ {<form details>} ] } .","title":"Add release note"},{"location":"ReleaseNote/#modify-release-note","text":"No separate API was built to update details in the release note. Because new changes must be visible to all the users again. We will add a new release note with the updated content and mark the old release note as inactive. Endpoint : POST /release-note Header : { \"Authorization\": \"Bearer < FORM DESIGNER TOKEN >\" } Body : A json object. - title: Release note title / Message title . - content: < formio orm object > - release_note_id: < old release note id > - Old release note id can be fould using list release note .","title":"Modify release note"},{"location":"ReleaseNote/#list-release-notes","text":"It will list all the active release notes. Endpoint : GET /release-note Header : { \"Authorization\": \"Bearer < FORM DESIGNER TOKEN >\" }","title":"List release notes"},{"location":"ReleaseNote/#fetch-unread-release-note","text":"One unread and active release note can be retrieved based on the user token. It will return 404 (not found) if no unread release note is found for the logged-in user. Endpoint : GET /release-note/unread Header : { \"Authorization\": \"Bearer < USER TOKEN >\" }","title":"Fetch unread release note"},{"location":"ReleaseNote/#mark-read-release-note-for-user","text":"It will mark release note read for the logged-in user. Endpoint : POST /release-note/read Header : { \"Authorization\": \"Bearer < USER TOKEN >\" } Body : A json object. - release_note_id: Release note id that will mark read for the logged-in user.","title":"Mark read release note for user"},{"location":"ReleaseNote/#how-to-add-release-note","text":"Let's understand the role of the designer and developer here in detail. Please go to the example section to see the sample release note .json and how it will be displayed on the web page.","title":"How to add Release note"},{"location":"ReleaseNote/#form-designer","text":"The form Designer needs to go to the Create Form page and design HTML content for the release note using the formio builder. Once the Form was designed, Go to the form list tab, select the release note form and click on Download Form . It will download one JSON file. That needs to pass on to the developer . It can be create on any lower environment like DEV or TEST . Notes The form name is not important, So feel free to pick any unique name or title here. No need to keep the created release note once you export the form's JSON and share it with the developer. To edit release notes, One can use the upload form feature on the form tab. Edit the required details and share them with the developer again to update the release note table. In the form builder, there is a provision for the custom class. So if you want to change any style like space between lines, header design, font size, etc. The designer can coordinate it with the developer and find an existing style class for it or the developer can add a new style class for the new style requirement.","title":"Form Designer"},{"location":"ReleaseNote/#developer","text":"To add a release note in the system. Developers can perform actions like adding, updating, and list release notes. Let's see how a release note can be added after receiving the .json file from the form designer . - Open postman or any API manager tool. - Follow Add release note operations steps. - In case of modify release note, please follow Modify release note . - Please collect old release note id using List release notes .","title":"Developer"},{"location":"ReleaseNote/#emample","text":"If you want to start editing the sample form, Please download it from here . (for designer) Upload it in the form tab by clicking on 'upload form'. Now you can edit it with new content. Download it again and share the same with developer. Please find sample add release note json here . (for developer) To checkout content of the above JSON file, please see below release-note popup.","title":"Emample"},{"location":"ReleaseNote/#future-enhancement","text":"Currently, there is no frontend developed that is used to manage release notes. The below list can be reviewed and select required features and implements the same. No needs to add all the features/points. - Add new frontend that will list all the release notes. - Add a page where you can upload release note data and no need to ask any developer. It will work with the DESIGNER role only. - Create/modify component for the release note module separately than the form tab. It will take more time to replicate or use the same components to enable add/edit release note directly on the release-note page and no needs to go to the form tab. - From the list one can in-active any release notes. - Extend - List users who read the release note. - Re-enable a release note for one user by deleting its read entry. - Add a release note for the selected users only.","title":"Future enhancement"}]}