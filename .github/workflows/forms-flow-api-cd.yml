name: Deploy web api to Openshift

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - production
  push:
    branches: [ main ]
    paths:
      - "forms-flow-api/**"
      - "forms-flow-api-utils/**"

defaults:
  run:
    shell: bash
    working-directory: ./forms-flow-api

jobs:
  build-and-push-image:
    #if: github.event_name == 'push' && github.repository == 'bcgov/digital-journeys'
    name: Build Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image: forms-flow-webapi
            context: forms-flow-api
            dockerfile: Dockerfile
            name: forms-flow-webapi
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Set Build TAG for dev
        if: ${{!github.event.inputs.environment}}
        run: echo "BUILD_TAG=dev" >> $GITHUB_ENV
      - name: Set BUILD TAG for test and prod
        if: ${{github.event.inputs.environment}}
        run: echo "BUILD_TAG=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
      
      - run: echo ${{ env.BUILD_TAG }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ matrix.image }}
          tags: ${{ env.BUILD_TAG }}

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: image-registry.apps.silver.devops.gov.bc.ca/d89793-tools
          username: ${{ secrets.SA_USERNAME }}
          password: ${{ secrets.SA_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.name }}

      - name: Build and push Docker image dev
        if: ${{!github.event.inputs.environment || github.event.inputs.environment == 'dev'}}
        uses: docker/build-push-action@v2
        with:
          context: forms-flow-api
          push: true
          tags: dev
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push Docker image test/production
        if: ${{github.event.inputs.environment == 'production' || github.event.inputs.environment == 'test'}}
        uses: docker/build-push-action@v2
        with:
          context: forms-flow-api
          push: true
          tags: ${{ github.event.inputs.environment }}
          labels: ${{ steps.meta.outputs.labels }}

  # Deploy App images in Dev
  deployDev:
    if: ${{!github.event.inputs.environment || github.event.inputs.environment == 'dev'}}
    name: Deploy APP to Dev environment
    environment: dev
    runs-on: ubuntu-latest
    env:
      BUILD_ID: ${{ github.event.number }}
      NAMESPACE: ${{ secrets.NAMESPACE }}
      BUILD_NAMESPACE: ${{ secrets.BUILD_NAMESPACE }}
      FFAWEB_URL: ${{ secrets.FFAWEB_URL }}
      BRANCH: main
      API: forms-flow-webapi
    needs:
      - build-and-push-image
    steps:
      - name: Print env
        run: |
          echo BUILD ID: $BUILD_ID
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: $BRANCH
          echo FFAWEB_URL: $FFAWEB_URL
      - name: Checkout Target Branch
        uses: actions/checkout@v1

       # Log in to OpenShift.
       # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
       # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443
  
      - name: Deploy API
        run: |
          test -n "${NAMESPACE}"
          test -n "${BUILD_NAMESPACE}"
          test -n "${BRANCH}"
          echo "Current namespace is ${NAMESPACE}"
          #oc -n ${BUILD_NAMESPACE} policy add-role-to-group system:image-puller system:serviceaccounts:${NAMESPACE}
          echo "Passed"
          oc -n ${NAMESPACE} project
          oc -n ${NAMESPACE} process -f deployment/openshift/webapi_dc.yaml \
                -p NAME=${API} \
                -p IMAGE_NAMESPACE=${BUILD_NAMESPACE} \
                -p TAG_NAME=dev \
                -p CPU_REQUEST=100m \
                -p CPU_LIMIT=200m \
                -p MEMORY_REQUEST=100Mi \
                -p MEMORY_LIMIT=2Gi | \
          oc -n ${NAMESPACE} apply -f -
          #oc rollout latest dc/"${API}" -n ${NAMESPACE} 
          # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
          ATTEMPTS=0
          ROLLOUT_STATUS_CMD="oc rollout status dc/${API} -n ${NAMESPACE}"
          until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
            $ROLLOUT_STATUS_CMD
            ATTEMPTS=$((attempts + 1))
            sleep 10
          done
          oc project ${NAMESPACE}     
          echo "Listing pods.."
          oc get pods|grep "${API}"
          export ROUTE="$(oc get route ${API} -o jsonpath='{.spec.host}')"
          echo "${API} is exposed at 'https://'${ROUTE}" 

   # Deploy App and Api images in Test
  deployTest:
    name: Deploy APP to Test environment
    if: ${{ github.event.inputs.environment == 'test' }}
    environment: test
    runs-on: ubuntu-latest
    env:
      BUILD_ID: ${{ github.event.number }}
      NAMESPACE: ${{ secrets.NAMESPACE }}
      BUILD_NAMESPACE: ${{ secrets.BUILD_NAMESPACE }}
      FFAWEB_URL: ${{ secrets.FFAWEB_URL }}
      BRANCH: main
      API: forms-flow-webapi
    needs:
      - build-and-push-image
    steps:
      - name: Print env
        run: |
          echo BUILD ID: $BUILD_ID
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: $BRANCH
          echo FFAWEB_URL: $FFAWEB_URL
      - name: Checkout Target Branch
        uses: actions/checkout@v1

       # Log in to OpenShift.
       # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
       # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      - name: Deploy API
        run: |
          test -n "${NAMESPACE}"
          test -n "${BUILD_NAMESPACE}"
          test -n "${BRANCH}"
          echo "Current namespace is ${NAMESPACE}"
          #oc -n ${BUILD_NAMESPACE} policy add-role-to-group system:image-puller system:serviceaccounts:${NAMESPACE}
          echo "Passed"
          oc -n ${NAMESPACE} project
          oc -n ${NAMESPACE} process -f deployment/openshift/webapi_dc.yaml \
                -p NAME=${API} \
                -p IMAGE_NAMESPACE=${BUILD_NAMESPACE} \
                -p TAG_NAME=test \
                -p CPU_REQUEST=100m \
                -p CPU_LIMIT=200m \
                -p MEMORY_REQUEST=100Mi \
                -p MEMORY_LIMIT=2Gi | \
          oc -n ${NAMESPACE} apply -f -
          #oc rollout latest dc/"${API}" -n ${NAMESPACE} 
          # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
          ATTEMPTS=0
          ROLLOUT_STATUS_CMD="oc rollout status dc/${API} -n ${NAMESPACE}"
          until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
            $ROLLOUT_STATUS_CMD
            ATTEMPTS=$((attempts + 1))
            sleep 10
          done
          oc project ${NAMESPACE}     
          echo "Listing pods.."
          oc get pods|grep "${API}"
          export ROUTE="$(oc get route ${API} -o jsonpath='{.spec.host}')"
          echo "${API} is exposed at 'https://'${ROUTE}"

  # Deploy App and Api images in Production
  deployProd:
    name: Deploy APP to Production environment
    if: ${{ github.event.inputs.environment == 'production' }}
    environment: production
    runs-on: ubuntu-latest
    env:
      BUILD_ID: ${{ github.event.number }}
      NAMESPACE: ${{ secrets.NAMESPACE }}
      BUILD_NAMESPACE: ${{ secrets.BUILD_NAMESPACE }}
      FFAWEB_URL: ${{ secrets.FFAWEB_URL }}
      BRANCH: main
      API: forms-flow-webapi
    needs:
      - build-and-push-image
    steps:
      - name: Print env
        run: |
          echo BUILD ID: $BUILD_ID
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: $BRANCH
          echo FFAWEB_URL: $FFAWEB_URL
      - name: Checkout Target Branch
        uses: actions/checkout@v1

       # Log in to OpenShift.
       # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
       # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      - name: Deploy API
        run: |
          test -n "${NAMESPACE}"
          test -n "${BUILD_NAMESPACE}"
          test -n "${BRANCH}"
          echo "Current namespace is ${NAMESPACE}"
          #oc -n ${BUILD_NAMESPACE} policy add-role-to-group system:image-puller system:serviceaccounts:${NAMESPACE}
          echo "Passed"
          oc -n ${NAMESPACE} project
          oc -n ${NAMESPACE} process -f deployment/openshift/webapi_dc.yaml \
                -p NAME=${API} \
                -p IMAGE_NAMESPACE=${BUILD_NAMESPACE} \
                -p TAG_NAME=production \
                -p CPU_REQUEST=100m \
                -p CPU_LIMIT=200m \
                -p MEMORY_REQUEST=100Mi \
                -p MEMORY_LIMIT=2Gi | \
          oc -n ${NAMESPACE} apply -f -
          #oc rollout latest dc/"${API}" -n ${NAMESPACE} 
          # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
          ATTEMPTS=0
          ROLLOUT_STATUS_CMD="oc rollout status dc/${API} -n ${NAMESPACE}"
          until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
            $ROLLOUT_STATUS_CMD
            ATTEMPTS=$((attempts + 1))
            sleep 10
          done
          oc project ${NAMESPACE}     
          echo "Listing pods.."
          oc get pods|grep "${API}"
          export ROUTE="$(oc get route ${API} -o jsonpath='{.spec.host}')"
          echo "${API} is exposed at 'https://'${ROUTE}" 

  deploy-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - run: pip install mkdocs-material 
      - run: pip install mkdocs-macros-plugin
      - run: pip install pymdown-extensions
      - run: mkdocs gh-deploy --force
