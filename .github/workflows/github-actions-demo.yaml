name: GitHub openshift deployment demo
run-name: Apply forms-flow-documents deploymentConfigs on Openshift
on: 
  push:
    # paths:
    #   - "deployment/openshift/documents_api_dc.yaml"
    #   - "deployment/openshift/documents_api_bc.yaml"
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - production

jobs:
  #Print variables for logging and debugging purposes
  checkEnv:
    name: Check Env variables
    runs-on: ubuntu-latest
    steps:
      - name: Print Env Vars
        run: |
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Build ID: ${{ github.event.number }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo OC CLI Version: $(oc version)



  # Apply buildConfigs on Openshift
  apply-openshift-buildConfigs:
    runs-on: ubuntu-latest
    env:
      BUILD_NAMESPACE: d89793-tools
    steps:
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: apply openshift buildConfigs
        working-directory: ./deployment/openshift
        run: |
          oc -n ${BUILD_NAMESPACE} process -f forms-flow-documents_bc.yaml | oc -n ${BUILD_NAMESPACE} apply -f -
  
  build-and-push-image:
    #if: github.event_name == 'push' && github.repository == 'bcgov/digital-journeys'
    name: Build Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image: image-registry.apps.silver.devops.gov.bc.ca/d89793-tools/forms-flow-documents
            context: forms-flow-documents
            dockerfile: Dockerfile.prod
            name:  forms-flow-documents
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      
      - name: Set Build TAG for dev
        if: ${{!github.event.inputs.environment}}
        run: echo "BUILD_TAG=dev" >> $GITHUB_ENV
      
      - name: Set BUILD TAG for test and prod
        if: ${{github.event.inputs.environment}}
        run: echo "BUILD_TAG=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
      
      - run: echo ${{ env.BUILD_TAG }}
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ matrix.image }}
          tags: ${{ env.BUILD_TAG }}
      
      - run: echo ${{ steps.meta.outputs.tags }}
      
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: image-registry.apps.silver.devops.gov.bc.ca/d89793-tools
          username: ${{ secrets.SA_USERNAME }}
          password: ${{ secrets.SA_USERNAME_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.name }}

      - name: Build and push Docker image dev
        if: ${{!github.event.inputs.environment || github.event.inputs.environment == 'dev'}}
        uses: docker/build-push-action@v2
        with:
          context: forms-flow-documents
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push Docker image test/production
        if: ${{github.event.inputs.environment == 'production' || github.event.inputs.environment == 'test'}}
        uses: docker/build-push-action@v2
        with:
          context: forms-flow-documents
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  
  # Apply deployConfigs on Openshift in Dev
  apply-deploymentConfigsDev:
    if: ${{!github.event.inputs.environment || github.event.inputs.environment == 'dev'}}
    name: Apply deploymentConfigs in Dev environment
    environment: dev
    runs-on: ubuntu-latest
    env:
      BUILD_ID: ${{ github.event.number }}
      NAMESPACE: ${{ secrets.NAMESPACE }}
      BUILD_NAMESPACE: ${{ secrets.BUILD_NAMESPACE }}
      BRANCH: feature/DGJ_666-add-aot-pdf-generator
      # BRANCH: main
      DOCUMENTS_NAME: forms-flow-documents
    needs:
      - apply-openshift-buildConfigs
      - build-and-push-image
    steps:
      - name: Print env
        run: |
          echo BUILD ID: $BUILD_ID
          echo BUILD NAMESPACE: $NAMESPACE
          echo BUILD BUILD_NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: $BRANCH
          echo DOCUMENTS_NAME: $DOCUMENTS_NAME
          
      - name: Checkout Target Branch
        uses: actions/checkout@v2

       # Log in to OpenShift.
       # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
       # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443
  
      - name: apply deploymentConfig
        working-directory: ./deployment/openshift
        run: |
          # test -n "${NAMESPACE}"
          # test -n "${BUILD_NAMESPACE}"
          # test -n "${BRANCH}"
          echo "Current namespace is ${NAMESPACE}"
          #oc -n ${BUILD_NAMESPACE} policy add-role-to-group system:image-puller system:serviceaccounts:${NAMESPACE}
          echo "Passed"
          oc -n ${NAMESPACE} project
          oc -n ${NAMESPACE} process -f forms-flow-documents_dc.yaml \
                -p NAME=${DOCUMENTS_NAME} \
                -p IMAGE_NAMESPACE=${BUILD_NAMESPACE} \
                -p TAG_NAME=dev \
                -p CPU_REQUEST=100m \
                -p CPU_LIMIT=200m \
                -p MEMORY_REQUEST=100Mi \
                -p MEMORY_LIMIT=2Gi | \
          oc -n ${NAMESPACE} apply -f -
          
          # #oc rollout latest dc/"${API}" -n ${NAMESPACE} 
          # # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
          # ATTEMPTS=0
          # ROLLOUT_STATUS_CMD="oc rollout status dc/${API} -n ${NAMESPACE}"
          # until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
          #   $ROLLOUT_STATUS_CMD
          #   ATTEMPTS=$((attempts + 1))
          #   sleep 10
          # done
          # oc project ${NAMESPACE}     
          # echo "Listing pods.."
          # oc get pods|grep "${API}"
          # export ROUTE="$(oc get route ${API} -o jsonpath='{.spec.host}')"
          # echo "${API} is exposed at 'https://'${ROUTE}" 